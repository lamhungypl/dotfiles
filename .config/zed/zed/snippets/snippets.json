{
  "Destructure object": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "deso",
    "body": ["const {$2} = $1;"],
    "description": "Destrucutre object"
  },
  "Component Table List": {
    "scope": "typescript,typescriptreact",
    "prefix": "cl",
    "body": [
      "import { ${2:ModelType} } from 'AppModels';",
      "",
      "import { createColumnHelper } from '@tanstack/react-table';",
      "import { useMemo } from 'react';",
      "",
      "import AppTable from 'components/DataDisplay/AppTable/AppTable';",
      "import useInternalIdColumn from 'components/DataDisplay/AppTable/customHook/useInternalIdColumn';",
      "import useTableStateParams from 'components/DataDisplay/AppTable/customHook/useTableStateParams';",
      "",
      "type Props = {};",
      "",
      "const columnHelper = createColumnHelper<${2}>();",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "\tconst { tableId, queryParams } = useTableStateParams();",
      "",
      "\tconst { data: response, isFetching } = ${3:useListQuery}(queryParams);",
      "",
      "\tconst internalIdColumn = useInternalIdColumn<${2}>();",
      "",
      "\tconst columns = useMemo(",
      "\t\t() => [",
      "\t\t\tinternalIdColumn,",
      "\t\t\tcolumnHelper.accessor('name', {",
      "\t\t\t\theader: 'Name',",
      "\t\t\t}),",
      "\t\t],",
      "\t\t[internalIdColumn]",
      "\t);",
      "\treturn (",
      "\t\t<AppTable",
      "\t\t\ttableId={tableId}",
      "\t\t\tstate={{",
      "\t\t\t\tisLoading: isFetching",
      "",
      "\t\t\t}}",
      "\t\t\tdata={response?.data || []}",
      "\t\t\trowCount={response?.meta?.total}",
      "\t\t\tcolumns={columns}",
      "\t\t\tmeta={{ syncWithLocation: true }}",
      "\t\t/>",
      "\t);",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Create a List component"
  },
  "CRUD services": {
    "scope": "typescript,javascript,typescriptreact",
    "prefix": "crud",
    "description": "create a feature service",
    "body": [
      "import { ${1} } from 'AppModels';",
      "",
      "import crud from 'services/api/crud';",
      "import request from 'services/axios/cashierRequests';",
      "",
      "const endpoint = 'api/${TM_FILENAME_BASE/([A-Z]+|[A-Z]?[a-z]+)(?=$|\\W)/${1:/downcase}/g}';",
      "",
      "export default {",
      "  ...crud<${1}>(endpoint),",
      "};"
    ]
  },
  "bamboo modal dialog": {
    "scope": "typescript,typescriptreact",
    "prefix": "bbmd",
    "body": [
      "import { RootState } from 'AppTypes';",
      "",
      "import { yupResolver } from '@hookform/resolvers/yup';",
      "import { LoadingButton } from '@mui/lab';",
      "import { Button } from '@mui/material';",
      "import clsx from 'clsx';",
      "import { memo, useCallback, useMemo } from 'react';",
      "import { FormProvider, useForm } from 'react-hook-form';",
      "import { useDispatch, useSelector } from 'react-redux';",
      "",
      "import AppValidateField from 'components/HookForm/AppValidateField';",
      "import AppDialog from 'components/Modals/AppDialog';",
      "import { AppModalBtnProps } from 'components/Modals/AppModal';",
      "import yup from 'utils/yup';",
      "",
      "import styles from 'components/Modals/AppFormModal.module.scss';",
      "import AppErrorAlert from 'components/Alert/AppErrorAlert';",
      "",
      "type Props = AppModalBtnProps & {};",
      "",
      "const Schema = yup.object({",
      "  name: yup.string().required(),",
      "});",
      "",
      "type FormValues = yup.InferType<typeof Schema>;",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  const { open, setOpen } = props;",
      "  const dispatch = useDispatch();",
      "",
      "  const {",
      "    loading,",
      "    message,",
      "    success,",
      "    errors: serverErrors,",
      "  } = useSelector((state: RootState) =>",
      "    // categoryResponseSelector(state, 'deleteCategory')",
      "  );",
      "",
      "  const initPayload = useMemo<FormValues>(() => {",
      "    return {",
      "      name: '',",
      "    };",
      "  }, []);",
      "",
      "  const validation = useForm({",
      "    mode: 'onChange',",
      "    resolver: yupResolver(Schema),",
      "    values: initPayload,",
      "  });",
      "",
      "  const { handleSubmit } = validation;",
      "",
      "  const onSubmit = useCallback((values: FormValues) => {}, []);",
      "",
      "  const closeModal = useCallback(() => {",
      "    setOpen(false);",
      "  }, [setOpen]);",
      "",
      "  return (",
      "    <AppDialog",
      "      open={open}",
      "      setOpen={setOpen}",
      "      setClose={closeModal}",
      "      title=\"${2}\"",
      "      icon={undefined}",
      "    >",
      "      <FormProvider {...validation}>",
      "        <form autoComplete=\"off\" noValidate onSubmit={handleSubmit(onSubmit)}>",
      "          <div className={clsx(styles.form)}>",
      "            <div>",
      "              <AppValidateField",
      "                name=\"name\"",
      "                label=\"Name\"",
      "                placeholder=\"Name\"",
      "                isRequired",
      "              />",
      "",
      "              <AppErrorAlert message={message} errors={serverErrors} />",
      "            </div>",
      "            <div className=\"btn-group-modal\">",
      "              <LoadingButton loading={loading} type=\"submit\">",
      "                Save",
      "              </LoadingButton>",
      "              <Button type=\"button\" onClick={closeModal} variant=\"secondary\">",
      "                Cancel",
      "              </Button>",
      "            </div>",
      "          </div>",
      "        </form>",
      "      </FormProvider>",
      "    </AppDialog>",
      "  );",
      "};",
      "",
      "export default memo(${1:${TM_FILENAME_BASE}});",
      "",
      ""
    ]
  },
  "RTK Query Api": {
    "scope": "typescript,typescriptreact",
    "prefix": "rtkq",
    "body": [
      "import { baseApi } from 'store/query';",
      "",
      "export const injectedQueryApi$1 = baseApi.injectEndpoints({",
      "  endpoints: build => ({",
      "    $2,",
      "  }),",
      "});",
      "",
      "export const {} = injectedQueryApi;",
      ""
    ]
  },
  "App Icon": {
    "scope": "typescript,typescriptreact",
    "prefix": "aicon",
    "body": [
      "export const App$1Icon: FC<SvgIconProps> = forwardRef((props, ref) => {",
      "  return <SvgIcon ref={ref} viewBox=\"0 0 $2 $2\" {...props} component={$1} />;",
      "});",
      ""
    ]
  },
  "Bamboo Confirm Modal": {
    "description": "Bamboo confirm modal",
    "scope": "typescript,typescriptreact",
    "prefix": "bcmd",
    "body": [
      "import { LoadingButton } from '@mui/lab';",
      "import { Button } from '@mui/material';",
      "import { isEmpty } from 'lodash';",
      "import { memo, useCallback } from 'react';",
      "",
      "import AppErrorAlert from 'components/Alert/AppErrorAlert';",
      "import { getServerErrors } from 'components/Alert/utils';",
      "import AppConfirmDialog from 'components/Modals/AppConfirmDialog';",
      "import { AppModalBtnProps } from 'components/Modals/AppModal';",
      "",
      "type Props = AppModalBtnProps & {",
      "  mode?: 'true';",
      "};",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  const { open, setOpen } = props;",
      "",
      "  const [markAllItemsAsMedical, { isLoading, isSuccess, data, error = {} }] = $3;",
      "",
      "  const onSubmit = useCallback(() => {}, []);",
      "",
      "  const closeModal = useCallback(() => {",
      "    setOpen(false);",
      "  }, [setOpen]);",
      "",
      "  return (",
      "    <AppConfirmDialog",
      "      open={open}",
      "      title=\"${2}\"",
      "      onClose={closeModal}",
      "      description=\"${4}\"",
      "      actions={",
      "        <>",
      "          <LoadingButton loading={isLoading} onClick={onSubmit}>",
      "            Confirm",
      "          </LoadingButton>",
      "          <Button onClick={closeModal} variant=\"secondary\">",
      "            Cancel",
      "          </Button>",
      "        </>",
      "      }",
      "    >",
      "      {!isEmpty(error) && <AppErrorAlert {...getServerErrors(error)} />}",
      "    </AppConfirmDialog>",
      "  );",
      "};",
      "",
      "export default memo(${1:${TM_FILENAME_BASE}});",
      ""
    ]
  }
}
